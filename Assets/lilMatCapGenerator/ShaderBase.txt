{
    Properties
    {
        _Color ("Color", Color) = (0,0,0,1)
        _NormalMap ("Normal Map", 2D) = "bump" {}
        _NormalScale ("Scale", Float) = 1
        _Reflectance ("Reflectance", Range(0,1)) = 0.25
        [Toggle(IS_OUTPUT_MODE)] _IsOutput ("IsOutput", Int) = 0

        *PROPERTIES_BLOCK*
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }

        Pass
        {
            CGPROGRAM
            #pragma target 3.5
            #pragma vertex vert
            #pragma fragment frag
            #pragma shader_feature_local _ IS_OUTPUT_MODE

            #include "UnityCG.cginc"
            #include "Lighting.cginc"

            #define SPECULAR_LAYER_PROPS(n) \
                float4 _LC##n; \
                float4 _LP##n; \
                float _Smoothness##n; \
                float _SmoothnessCC##n; \
                float _CCStrength##n; \
                uint _BlendMode##n;

            #define SPECULAR_LAYER(n) \
                float roughness##n = (1.0 - _Smoothness##n) * (1.0 - _Smoothness##n); \
                float roughnessCC##n = (1.0 - _SmoothnessCC##n) * (1.0 - _SmoothnessCC##n); \
                float3 L##n = normalize(_LP##n.xyz); \
                float3 H##n = normalize(-V+L##n); \
                float NdotH##n = saturate(dot(N,H##n)); \
                float3 col##n = (pow(NdotH##n, 1.0/roughness##n) + pow(NdotH##n, 1.0/roughnessCC##n) * _CCStrength##n) * _LC##n.rgb; \
                col.rgb = BlendColor(col.rgb, col##n, 1.0, _BlendMode##n);

            #define MATCAP_LAYER_PROPS(n) \
                sampler2D _MatCap##n; \
                float4 _MatCapColor##n; \
                uint _BlendMode##n;

            #define MATCAP_LAYER(n) \
                float4 col##n = tex2D(_MatCap##n, N.xy * 0.5 + 0.5) * _MatCapColor##n; \
                col.rgb = BlendColor(col.rgb, col##n.rgb, col##n.a, _BlendMode##n);

            #define CUBE_LAYER_PROPS(n) \
                samplerCUBE _CubeMap##n; \
                float4 _CubeMapColor##n; \
                float4 _CubeMapRotation##n; \
                float _Smoothness##n; \
                uint _BlendMode##n;

            #define CUBE_LAYER(n) \
                float roughness##n = (1.0 - _Smoothness##n) * (1.0 - _Smoothness##n); \
                float3 R##n = RotateVector(R, _CubeMapRotation##n.rgb / 180.0 * UNITY_PI); \
                float3 col##n = texCUBElod(_CubeMap##n, float4(R##n, roughness##n * 10)).rgb * _CubeMapColor##n.rgb; \
                col.rgb = BlendColor(col.rgb, col##n, 1.0, _BlendMode##n);

            #define TONECORRECTION_LAYER_PROPS(n) \
                float4 _HSVG##n; \
                float _ClampMin##n; \
                float _ClampMax##n;

            #define TONECORRECTION_LAYER(n) \
                col.rgb = clamp(col.rgb, _ClampMin##n, _ClampMax##n); \
                col.rgb = ToneCorrection(col.rgb, _HSVG##n);

            sampler2D _NormalMap;
            float4 _NormalMap_ST;
            float4 _Color;
            float _Reflectance;
            float _NormalScale;

            *PROPERTIES_HLSL*

            //------------------------------------------------------------------------------------------------------------------------------
            // Color
            float Median(float r, float g, float b)
            {
                return max(min(r, g), min(max(r, g), b));
            }

            float Median(float3 c)  { return Median(c.r, c.g, c.b); }
            float Minimum(float3 c) { return min(min(c.r, c.g), c.b); }
            float Maximum(float3 c) { return max(max(c.r, c.g), c.b); }
            float RGBtoL(float3 c)  { return dot(c, float3(0.3, 0.59, 0.11)); }
            float RGBtoS(float3 c)  { return Maximum(c) - Minimum(c); }

            float3 ClipColor(float3 c)
            {
                float L = RGBtoL(c);
                float n = Minimum(c);
                float x = Maximum(c);
                if(n < 0) c = L + (((c - L) * L) / (L - n));
                if(x > 1) c = L + (((c - L) * (1 - L)) / (x - L));
                return c;
            }

            float3 SetL(float3 c, float l)
            {
                c = c + l - RGBtoL(c);
                return ClipColor(c);
            }

            float3 SetS(float3 c, float s)
            {
                float cmax = Maximum(c);
                float cmin = Minimum(c);
                float cmid = Median(c);
                bool RisMax = cmax == c.r;
                bool RisMin = cmin == c.r;
                bool GisMax = cmax == c.g;
                bool GisMin = cmin == c.g;
                bool BisMax = cmax == c.b;
                bool BisMin = cmin == c.b;
                if(cmax > cmin)
                {
                    cmid = (((cmid - cmin) * s) / (cmax - cmin));
                    cmax = s;
                }
                else
                {
                    cmid = 0;
                    cmax = 0;
                }
                cmin = 0;

                c.r = RisMax ? cmax : RisMin ? cmin : cmid;
                c.g = GisMax ? cmax : GisMin ? cmin : cmid;
                c.b = BisMax ? cmax : BisMin ? cmin : cmid;

                return c;
            }

            half3 BlendColor(half3 dst, half3 src, half3 srcA, uint blendMode)
            {
                half3 ad = dst + src;
                half3 mu = dst * src;
                half3 sc = ad - mu;
                half3 srcPM = src * srcA;
                half3 burn =
                    dst == 1 ? 1 :
                    src == 0 ? 0 :
                    1.0 - (1.0 - dst) / src;
                half3 dodge =
                    dst == 0 ? 0 :
                    src == 1 ? 1 :
                    dst / (1.0 - src);
                half dsum = dst.r + dst.g + dst.b;
                half ssum = src.r + src.g + src.b;
                float dS = RGBtoS(dst);
                float dL = RGBtoL(dst);
                float sS = RGBtoS(src);
                float sL = RGBtoL(src);
                half3 outCol;
                if(blendMode ==  0) outCol = src;                       // 通常

                if(blendMode ==  1) outCol = min(dst, src);             // 比較(暗)
                if(blendMode ==  2) outCol = mu;                        // 乗算
                if(blendMode ==  3) outCol = burn;                      // 焼き込みカラー
                if(blendMode ==  4) outCol = ad - 1.0;                  // 焼き込み(リニア)
                if(blendMode ==  5) outCol = dsum > ssum ? src : dst;   // カラー比較(暗)

                if(blendMode ==  6) outCol = max(dst, src);                                     // 比較(明)
                if(blendMode ==  7) outCol = sc;                                                // スクリーン
                if(blendMode ==  8) outCol = dodge;                                             // 覆い焼きカラー
                if(blendMode ==  9){outCol = srcPM == 1 ? 1 : dst / (1.0 - srcPM); srcA = 1.0;} // 覆い焼き(発光)
                if(blendMode == 10) outCol = ad;                                                // 加算 / 覆い焼き(リニア)
                if(blendMode == 11){outCol = dst + srcPM; srcA = 1.0;}                          // 加算(発光)
                if(blendMode == 12) outCol = dsum > ssum ? dst : src;                           // カラー比較(明)

                if(blendMode == 13) outCol = dst > 0.5 ? sc * 2.0 - 1.0 : mu * 2.0;                                             // オーバーレイ
                if(blendMode == 14) outCol = src > 0.5 ? 2.0 * (dst - mu + sqrt(dst) * (src - 0.5)) : (sc * 2.0 - dst) * dst;   // ソフトライト (Photoshop)
                if(blendMode == 15) outCol = (1.0 - dst) * 2.0 * mu + dst * dst;                                                // ソフトライト (Pegtop)
                if(blendMode == 16) outCol = src > 0.5 ? sc * 2.0 - 1.0 : mu * 2.0;                                             // ハードライト
                if(blendMode == 17) outCol = src > 0.5 ? dodge * 2.0 : burn * 2.0 - 1.0;                                        // ビビッドライト
                if(blendMode == 18) outCol = dst + 2.0 * src - 1.0;                                                             // リニアライト
                if(blendMode == 19) outCol = src > 0.5 ? max(dst, 2.0 * src - 1.0) : min(dst, 2.0 * src);                       // ピンライト
                if(blendMode == 20) outCol = float3(dst.r + src.r > 1.0, dst.g + src.g > 1.0, dst.b + src.b > 1.0);             // ハードミックス

                if(blendMode == 21) outCol = abs(dst - src);            // 差の絶対値
                if(blendMode == 22) outCol = ad - mu * 2.0;             // 除外
                if(blendMode == 23) outCol = dst - src;                 // 減算
                if(blendMode == 24) outCol = src == 0 ? 1 : dst / src;  // 除算

                if(blendMode == 25) outCol = SetL(SetS(src, dS), dL);   // 色相
                if(blendMode == 26) outCol = SetL(SetS(dst, sS), dL);   // 彩度
                if(blendMode == 27) outCol = SetL(src, dL);             // カラー
                if(blendMode == 28) outCol = SetL(dst, sL);             // 輝度

                outCol = max(0.0, outCol);
                return lerp(dst, outCol, srcA);
            }

            float3 ToneCorrection(float3 c, float4 hsvg)
            {
                // gamma
                c = pow(abs(c), hsvg.w);
                // rgb -> hsv
                float4 p = (c.b > c.g) ? float4(c.bg,-1.0,2.0/3.0) : float4(c.gb,0.0,-1.0/3.0);
                float4 q = (p.x > c.r) ? float4(p.xyw, c.r) : float4(c.r, p.yzx);
                float d = q.x - min(q.w, q.y);
                float e = 1.0e-10;
                float3 hsv = float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
                // shift
                hsv = float3(hsv.x+hsvg.x,saturate(hsv.y*hsvg.y),saturate(hsv.z*hsvg.z));
                // hsv -> rgb
                return hsv.z - hsv.z * hsv.y + hsv.z * hsv.y * saturate(abs(frac(hsv.x + float3(1.0, 2.0/3.0, 1.0/3.0)) * 6.0 - 3.0) - 1.0);
            }

            //------------------------------------------------------------------------------------------------------------------------------
            // Rotation
            float3x3 GetRotMatrix(float3 rot)
            {
                float sinx,cosx;
                float siny,cosy;
                float sinz,cosz;
                sincos(rot.x,sinx,cosx);
                sincos(rot.y,siny,cosy);
                sincos(rot.z,sinz,cosz);
                return float3x3(
                    cosy * cosz,    sinx * siny * cosz - cosx * sinz,   cosx * siny * cosz + sinx * sinz,
                    cosy * sinz,    sinx * siny * sinz + cosx * cosz,   cosx * siny * sinz - sinx * cosz,
                    -siny,          sinx * cosy,                        cosx * cosy
                );
            }

            float3 RotateVector(float3 V, float3 rot)
            {
                return mul(GetRotMatrix(rot), V);
            }

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                #if !defined(IS_OUTPUT_MODE)
                    float3 normal : NORMAL;
                    float4 tangent : TANGENT;
                #endif
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            struct v2f
            {
                float4 vertex       : SV_POSITION;
                float2 uv           : TEXCOORD0;
                #if !defined(IS_OUTPUT_MODE)
                    float3 normal       : TEXCOORD1;
                    float3 tangent      : TEXCOORD2;
                    float3 bitangent    : TEXCOORD3;
                    float4 positionWS   : TEXCOORD4;
                #endif
                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            v2f vert (appdata v)
            {
                v2f o;

                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _NormalMap);
                #if !defined(IS_OUTPUT_MODE)
                    o.normal = UnityObjectToWorldNormal(v.normal);
                    o.tangent = UnityObjectToWorldDir(v.tangent.xyz);
                    o.bitangent = normalize(cross(o.normal, o.tangent) * v.tangent.w);
                    o.positionWS = mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1.0));
                #endif

                return o;
            }

            float4 frag (v2f i) : SV_Target
            {
                UNITY_SETUP_INSTANCE_ID(i);
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

                float3 V = float3(0,0,-1); //normalize(i.positionWS - _WorldSpaceCameraPos.xyz);
                float3 N;
                #if defined(IS_OUTPUT_MODE)
                    N.xy = i.uv.xy * 2.0 - 1.0;
                    N.z = saturate(1.0 - N.x * N.x - N.y * N.y);
                    N.z = N.z == 0.0 ? 0.0 : sqrt(N.z);
                    N = normalize(N);
                #else
                    float4 normalMap = tex2D(_NormalMap, i.uv);
                    float3 normalTS = UnpackScaleNormal(normalMap, _NormalScale);
                    float3x3 TBN = float3x3(i.tangent, i.bitangent, i.normal);
                    N = mul(normalTS, TBN);
                    N = normalize(mul((float3x3)UNITY_MATRIX_V, N));
                #endif
                N.x = -N.x;
                float3 R = reflect(V,N);
                float NdotV = dot(N,V);
                float4 col = float4(0,0,0,1);

                *LAYERS_HLSL*

                col.rgb *= lerp(_Reflectance, 1.0, pow(saturate(1.0+NdotV), 5.0));

                #if defined(UNITY_COLORSPACE_GAMMA)
                    col.rgb += GammaToLinearSpace(_Color.rgb);
                    col.rgb = LinearToGammaSpace(col.rgb);
                #else
                    col += _Color;
                #endif
                return col;
            }
            ENDCG
        }
    }

    CustomEditor "lilMatCapGenerator.MCGShaderGUI"
}